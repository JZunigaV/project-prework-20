<section class="learning">
<div id="commentable-container" class="container commentable-container col-md-6">
  <h1 class="title">
    What is Distributed Version Control?

  </h1>
  <cite class= "sublead">
    A Distributed Version Control System (DVCS) or Version Control System (VCS) is a system that records changes to a file or
    set of files over time so you can recall specific versions later.
  </cite>

  <p data-section-id="1" class="commentable-section">
    <strong>The DVCS usually works together with a Code Hosting Platform, where your team can store your project’s code to share it among
    members of the team</strong>. In computer programming, the combination of DVCS with a Code Hosting Platform help you to work with
    your team. This is the most powerful tool you will use to combine code created by different team members. When two different
    team members are working on the same file, the VCS is going to help them combine their different code, and pick which
    code to accept if both developers edit the same code.
  </p>
  <p data-section-id="2" class="commentable-section">
    Having different versions of the same file gives you huge power over your code. As said before, if you break something in
    the latest version of the code, you will be able to recover the old correct version of your code. It’s also very helpful
    when you are combining code from different developers into one file, or even different files into one project (don’t
    worry if you don’t understand this right now, you are going to learn this in depth later on). <strong>Another cool feature that
    it provides you is the chance to see who has written each code.</strong> It allows you to defend how many hours have you been
    working, of course, but it’s funnier to use it to figure out who has screw up the code.
  </p>

<img src="https://i.imgur.com/7c6ss6v.jpg" alt="" class="lessonpic">

  <p data-section-id="3" class="commentable-section">
    <strong>Git is a free and open DVCS designed to handle computer programming projects with speed and efficiency.</strong> It’s easy to learn
    and has a very high performance. Git runs locally. What does it mean? It allows you to use the Version Control System
    in your laptop. It means that you will have in your own computer a Version Control System, to recover all code, see what
    changes you have done, etc. You are going to understand why you need to use Git in your computer in a minute. Before
    understand that, you need to learn what is GitHub.
  </p>

  <p data-section-id="4" class="commentable-section">
    Git is a free and open DVCS designed to handle computer programming projects with speed and efficiency. It’s easy to learn
    and has a very high performance. Git runs locally. What does it mean? It allows you to use the Version Control System
    in your laptop. It means that you will have in your own computer a Version Control System, to recover all code, see what
    changes you have done, etc. You are going to understand why you need to use Git in your computer in a minute. Before
    understand that, you need to learn what is GitHub.
  </p>

  {{!-- This is the handlebar helper that we registered--}} {{assign 'existingComments' this.data.coment}}

<div class="quiz form-group">
<h3 class = "quiztitle">Quiz 1: Hello, GitHub!</h3>
<form action="/quiz1" method="post" class = "form-inline">
<label for="quiz1">It's time to set up your first GitHub repository. Open a GitHub account and create a new repository with a simple "Hello World" JavaScript application. Paste the URL for your repository here.</label>
<input type="text" name="quiz1" id="quiz1" class = "form-control quizinput">
<input id='submitquiz1' onclick="handleSubmit()" type="submit" value="Submit" class="btn btn-success quizinput">
</form>
<small id="quiz1helper" class="form-text text-muted">{{{successMessage}}}</small>

</div>
</section>

</div>



<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
<script src="/javascripts/side-comments.js"></script>
<script src="/javascripts/test_data.js"></script>
<script type="text/javascript">

  //Existing comments
  var existingComments = [{{{@root.existingComments}}}];
  console.log(existingComments)
  //Construimos el objeto del usuario actual
  var currentUsera = {
    id: `{{this.data.user.id}}`,
    avatarUrl: `{{this.data.user.avatarUrl}}`,
    authorUrl: `{{this.data.user.authorUrl}}`,
    name: `{{this.data.user.username}}`
  };
</script>
<script src="/javascripts/learning.js"></script>
<script src="/javascripts/quiz.js"></script>


